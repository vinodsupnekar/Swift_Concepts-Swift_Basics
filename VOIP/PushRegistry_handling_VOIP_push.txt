PushRegistry :-

***** Register Your App with PushKit at Launch Time :- 
The system can’t deliver push notifications to your app until you create a PKPushRegistry object and specify the types of notifications you support.

Typically, you create this object at launch time and store a reference to it for the duration of your app’s runtime. The following example shows how to create this object and configure it with the Voice-over-IP (VoIP) push type. During configuration, always specify a delegate object to receive notifications.

func registerForVoIPPushes() {
    self.voipRegistry = PKPushRegistry(queue: nil)
    self.voipRegistry.delegate = self
    self.voipRegistry.desiredPushTypes = [.voIP]
}


***** Send the Device Token to Your Server:- 

-In order to deliver notifications to a user device, your server must know the address of that device. PushKit provides the address to you in the form of a device token, which is an opaque data object. When you register your app’s supported push types, the PKPushRegistry object creates a PKPushCredentials object and delivers it to your delegate’s pushRegistry(_:didUpdate:for:) method. The credentials object contains the device token for the current device. 

- Upon receiving a device token, forward it to your server along with any other information you need to identify the user, such as their account unique identifier. To ensure the security of the user's information, always encrypt the token and all user data before sending it over the network.

Payload and Headers :- 

Header:- Set push type as voip :- 
apns-push-type header = voip


*****
When one of your users initiates a phone call, your server must connect to your app on the recipient’s device. If your server doesn't have an active network connection to the app, you can ask the app to check in by sending it a push notification. Construct the push notification request on your server and send it to APNs for delivery to the user's device. 

PushRegistryDelegate:-

1.pushRegistry(_:didReceiveIncomingPushWith:for:completion:)
- Tells the delegate that a remote push notification arrived.

The following code example shows how you might process an incoming VoIP push notification in your pushRegistry(_:didReceiveIncomingPushWith:for:completion:) method. After extracting the call data from the notification's payload dictionary, create a CXCallUpdate object and pass it to the reportNewIncomingCall(with:update:completion:) method of your app's CXProvider object.

func pushRegistry(_ registry: PKPushRegistry, 
          didReceiveIncomingPushWith payload: PKPushPayload, 
          for type: PKPushType, 
          completion: @escaping () -> Void) {
   if type == .voIP {
      // Extract the call information from the push notification payload
      if let handle = payload.dictionaryPayload["handle"] as? String,
            let uuidString = payload.dictionaryPayload["callUUID"] as? String,
            let callUUID = UUID(uuidString: uuidString) {

         // Configure the call information data structures.
         let callUpdate = CXCallUpdate()
         let phoneNumber = CXHandle(type: .phoneNumber, value: handle)
         callUpdate.remoteHandle = phoneNumber
                
         // Report the call to CallKit, and let it display the call UI.
         callProvider?.reportNewIncomingCall(with: callUUID, 
                     update: callUpdate, completion: { (error) in
            if error == nil {
               // If the system allows the call to proceed, make a data record for it.
               let newCall = VoipCall(callUUID, phoneNumber: phoneNumber)
               self.callManager.addCall(newCall)
            }

            // Tell PushKit that the notification is handled.
            completion()
         })
                
         // Asynchronously register with the telephony server and 
         // process the call. Report updates to CallKit as needed.
         establishConnection(for: callUUID)
      }
   }
}


-While CallKit processes your request, establish a connection to your VoIP server in parallel; you can always notify CallKit later if you run into problems. If CallKit handles the call successfully, the completion block creates some custom data structures to manage that call within the app.

-If the system allows your call to proceed, the reportNewIncomingCall(with:update:completion:) method executes its completion block and CallKit displays the incoming call interface. At that point, use the delegate of your CXProvider object to respond to user interactions with the interface. For example, use your delegate to respond when the user answers or ends the call.

***Note : ****
If you didn’t put caller information in your notification’s payload, call the reportCall(with:updated:) method of your app's provider object to update the calling interface. You can call that method at any time to update calls. For example, call it after your app fetches updated caller information from your VoIP server.


Many things can go wrong when connecting a VoIP call, and CallKit makes it easy to handle problems when they occur.

1. User initiated call hags up.
- use the network connection between your app and server to notify the app. In your app, call the reportCall(with:endedAt:reason:) method of its CXProvider object, specifying CXCallEndedReason.remoteEnded as the reason for the end of the call.
- If the incoming call interface is onscreen, CallKit updates the interface to reflect the end of the call, and dismisses the interface.

2. If the recipient of a call answers before the app establishes a connection to your server:-
- Don't fulfill the CXAnswerCallAction object sent to the provider(_:perform:) method of your delegate immediately.
- Instead, wait until you establish a connection and then fulfill the object. While it waits for your app to fulfill the request, the incoming call interface lets the user know that the call is connecting, but not yet ready.


3. If your app fails to establish a connection to your server - 
- call the reportCall(with:endedAt:reason:) method with the CXCallEndedReason.failed option.
-  If the incoming call interface is currently onscreen, the system updates it to indicate a failed call.




