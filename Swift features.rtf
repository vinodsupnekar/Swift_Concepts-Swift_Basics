{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 Times-Italic;
\f3\fmodern\fcharset0 Courier;\f4\fnil\fcharset0 HelveticaNeue-Bold;\f5\fnil\fcharset0 HelveticaNeue;
\f6\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red213\green213\blue213;\red26\green26\blue26;\red18\green18\blue18;
\red212\green212\blue212;\red21\green21\blue23;\red222\green43\blue91;}
{\*\expandedcolortbl;;\cssrgb\c86667\c86667\c86667;\cssrgb\c13333\c13333\c13333;\cssrgb\c9020\c9020\c9020;
\cssrgb\c86275\c86275\c86275;\cssrgb\c10980\c10980\c11765;\cssrgb\c90588\c27059\c43137;}
\paperw11900\paperh16840\margl1440\margr1440\vieww19800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Swift 5 features:- \
\
1.ABI Stability\
ABI stability is one of the major highlights of Swift 5.0 features. ABI stability stands for Application Binary Interface stability, which is a binary equivalent of an API, an Application Programming Interface.\
\
iOS app developers use various API libraries to write code using Swift for your apps. For example, The UIKit framework provides API to interface with buttons, labels, and view controllers.\
\
With ABI stability, when a user downloads and installs your app, they won\'92t have to download all the code your app requires. Most of those codes are already present on their iPhone, as part of iOS, its frameworks, and API libraries. Your app will just have to use the binary code already present. ABI stability in Swift 5 will make future apps smaller and easier to build.\
\
\
2. Integer Multiples With \'93isMultiple(of:)\'94\
There are a lot of use cases in practical programming when it comes to Swift. One of the most common is checking if a number is divisible by another number (Integer Multiples). As it again requires checking if a number is even or odd, the default approach is to use the remainder operator %.\
\
Swift 5 comes with a new function isMultiple(of:) for checking if a given integer is a multiple of another number. This is one of the best Swift 5 features, that improves the readability of the code and also discoverable by the auto-completion of XCode.\
\
Sample Usage:\
let number = 42\
if number.isMultiple(of: 2) \{\
    print("\\(number) is even!")\
\}    \
\
\
3. The Result Type\
Swift 5 introduces a new type called Result type for iOS app development. This type works with two states of a passed result: success and failure, and due to its high popularity, it\'92s now available in the Swift standard library.\
\
Result type encapsulates possible return values and errors in one object. It leverages the power of enumerations and SWift 5 helps you write more meaningful code.\
\
Sample Usage:\
\
dataTask(with: url) \{ (result: Result<Data, Error) in\
    switch result \{\
    case let .success(data):\
        handleResponse(data: data)\
    case let .error(error):\
        handleError(error)\
    \}\
\}    \
\
4. Filter And Count With \'93count(where:)\'94\
You might be already familiar with collection functions like map(_:), reduce(_:) and filter(_:). The problems with the above functions are \'97 they make the code too verbose and wasteful. Though we only want to count, we first need to filter, and this is where \'91count(where:) comes in. This function allows us to filter and count in one function call seamlessly using Swift 5.\
\
\
Sample Usage:\
let scores = [1, 3, 8, 2, 5, 6, 2, 10]\
let count = scores.count(where: \{ $0 > 5 \})\
print(count)\
\
Output = 3\
\
5. Flatten Nested Optionals With \'93try?\'94\
Though it\'92s not wrong to use nested operators, they are confusing and seem unnecessary. Sometimes they need a larger number of operations for even doing a simple task. Swift 5 flatten the nested optional resulting from try? giving them the same behavior as? and optional chaining. This also helps the developer keep code neat and clean. \
\
Sample Usage:\
if let engine = (try? bike?.getEngine()) as? Engine \{\
    // that's it\
\}\
\
6. The New \'93compactMapValues()\'94 Function For Dictionary\
One of the swift 5 features includes \'93compactMapValues()\'94 Function. The standard Swift library comes with two important functions for arrays and a dictionary.\
\
map(_:) \'96 It applies a function to array items and returns the resulting array.\
\
compactMap(_:) \'96 it discards array items that are nil.\
\
On the other hand, The mapValues(_:) function does the same for dictionaries except it doesn\'92t discard the nil array items. Swift 5 bring s(_:) function for dictionaries.\
\
It basically combines the compactMap(_:) function of arrays with the mapValues(_:) function of dictionaries for effective mapping and filtering values.\
\
7. Raw Strings\
This is one of the Swift 5 features that allows you to create raw strings. The backlashes and quote marks are interpreted as the literal symbols instead of escapes characters or string terminators. The regular expressions and other user-cases become easier.\
\
To use raw strings, you can put one or more # symbols before the strings:\
\
let rain = #"The "rain" in "Spain" falls mainly on the Spaniards."#\
The hashtag symbols at the start and end of the string are a part of the string delimiter. This way, Swift interprets that the standalone quote marks around \'93rain\'94 and \'93Spain\'94 should be treated as into quote marks rather than ending the string.\
\
Similarly, raw strings allow you to use backslashes too:\
\
let keypaths = #"Swift keypaths such as \\Person.name hold uninvoked references to properties."#   \
Even here, the backslash is being treated as a literal character in the string, rather than an escape character.\
\
An interesting feature of these raw strings is how you can use the hashtag at the start and end. Even if you want to use it more than once in an unlikely event. Consider this string: My cat said \'93meow\'94#goodcat. As there is no gap ahead of the hashtag, Swift will detect \'93# and understand it as the string terminator. In this situation we need to change our delimiter from #\'94 to ##\'94, like this:\
\
let str = ##"My cat said "meow"#goodcat"##\
Make sure that the number of hashes at the end matches the number at the start, for the right result.\
\
Raw strings and Swift\'92s multi-line string system are fully compatible with each other \'96 all you need to do is use #\'94\'94\'94 to start, then \'93\'94\'94# to end, like this:\
\
let multiline = #"""\
The answer to life,\
the universe,\
and everything is \\#(answer).\
"""#\
\
\
\
Swift 5.1 :-  \
\
 Property wrappers :-\
-
\f1\fs35\fsmilli17640 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Like the name implies, a property wrapper is essentially a type that\'a0
\f2\i wraps
\f1\i0 \'a0a given value in order to attach additional logic to it\'a0\
-can be implemented using either a struct or a class by annotating it with the\'a0
\f3\fs21\fsmilli10800 \cb4 @propertyWrapper
\f1\fs35\fsmilli17640 \cb3 \'a0attribute
\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
-
\f1\fs35\fsmilli17640 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Besides that, the only real requirement is that each property wrapper type should contain a stored property called\'a0
\f3\fs21\fsmilli10800 \cb4 wrappedValue\

\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
Swift 5.5.:-\
\
\pard\pardeftab720\sl613\partightenfactor0

\f4\b\fs43\fsmilli21900 \cf5 \cb6 \expnd0\expndtw0\kerning0
Async/await\
\pard\pardeftab720\partightenfactor0

\f5\b0\fs35\fsmilli17600 \cf5 Introduces asynchronous (async) functions into Swift, allowing us to run complex asynchronous code almost is if it were synchronous. This is done in two steps: marking async functions with the new\'a0
\f6\b \cf7 async
\f5\b0 \cf5 \'a0keyword, then calling them using the\'a0
\f6\b \cf7 await
\f5\b0 \cf5 \'a0keyword, similar to other languages such as C# and JavaScript.\
\
\
Aync -aWait :- structured concurrency.\
\
import Foundation\
\
E.g\
\
func fetchWeatherHistory(completion: @escaping ([Double]) -> Void) \{\
    // Complex networking code here; we'll just send back 100,000 random temperatures\
    DispatchQueue.global().async \{\
        let results = (1...100_000).map \{ _ in Double.random(in: -10...30) \}\
        completion(results)\
    \}\
\}\
\
func calculateAverageTemperature(for records: [Double], completion: @escaping (Double) -> Void) \{\
    // Sum our array then divide by the array size\
    DispatchQueue.global().async \{\
        let total = records.reduce(0, +)\
        let average = total / Double(records.count)\
        completion(average)\
    \}\
\}\
\
func upload(result: Double, completion: @escaping (String) -> Void) \{\
    // More complex networking code; we'll just send back "OK"\
    DispatchQueue.global().async \{\
        completion("OK")\
    \}\
\}\
\
\
When it comes to using that code, we need to call them one by one in a chain, providing completion closures for each one to continue the chain, like this:\
\
fetchWeatherHistory \{ records in\
    calculateAverageTemperature(for: records) \{ average in\
        upload(result: average) \{ response in\
            print("Server response: \\(response)")\
        \}\
    \}\
\}\
\
\
\
func fetchWeatherHistory() async -> [Double] \{\
    (1...100_000).map \{ _ in Double.random(in: -10...30) \}\
\}\
\
func calculateAverageTemperature(for records: [Double]) async -> Double \{\
    let total = records.reduce(0, +)\
    let average = total / Double(records.count)\
    return average\
\}\
\
func upload(result: Double) async -> String \{\
    "OK"\
\}\
That has already removed a lot of the syntax around returning values asynchronously, but at the call site it\'92s even cleaner:\
\
func processWeather() async \{\
    let records = await fetchWeatherHistory()\
    let average = await calculateAverageTemperature(for: records)\
    let response = await upload(result: average)\
    print("Server response: \\(response)")\
\}\
}