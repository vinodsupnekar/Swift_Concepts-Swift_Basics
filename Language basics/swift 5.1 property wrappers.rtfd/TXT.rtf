{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 HelveticaNeue-Italic;\f4\froman\fcharset0 Times-Italic;\f5\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red213\green213\blue213;\red26\green26\blue26;\red255\green255\blue255;
\red0\green0\blue0;\red17\green17\blue17;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;
\red255\green255\blue254;\red255\green255\blue255;\red229\green229\blue229;\red255\green255\blue255;\red255\green255\blue255;
\red255\green255\blue255;\red18\green18\blue18;\red223\green30\blue123;\red20\green20\blue20;\red153\green174\blue174;
\red111\green106\blue190;\red33\green157\blue139;}
{\*\expandedcolortbl;;\cssrgb\c86667\c86667\c86667;\cssrgb\c13333\c13333\c13333;\cssrgb\c100000\c100000\c100000;
\cssrgb\c0\c0\c0;\cssrgb\c8627\c8627\c8627;\cssrgb\c100000\c100000\c99985;\cssrgb\c0\c1\c1;\cssrgb\c100000\c100000\c99849;
\cssrgb\c100000\c100000\c99833;\cssrgb\c100000\c100000\c99895;\cssrgb\c91958\c91958\c91843;\cssrgb\c100000\c100000\c99971;\cssrgb\c100000\c100000\c99956;
\cssrgb\c100000\c100000\c99926;\cssrgb\c9020\c9020\c9020;\cssrgb\c90980\c23137\c55686;\cssrgb\c10196\c10196\c10196;\cssrgb\c66275\c73725\c73725;
\cssrgb\c50980\c50588\c79216;\cssrgb\c12941\c67059\c61569;}
\paperw11900\paperh16840\margl1440\margr1440\vieww20900\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs35\fsmilli17640 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 APPLE DOC:-  https://docs.swift.org/swift-book/documentation/the-swift-programming-language/properties/#Setting-Initial-Values-for-Wrapped-Properties\
\
\pard\tx566\pardeftab720\partightenfactor0

\f1\fs34 \cf4 \cb1 \outl0\strokewidth0 \
\pard\pardeftab720\sl500\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://docs.swift.org/swift-book/documentation/the-swift-programming-language/properties/#Property-Wrappers"}}{\fldrslt 
\fs45\fsmilli22588 \cf4 \cb5 Property Wrappers}}
\fs45\fsmilli22588 \cb5 \
\pard\pardeftab720\partightenfactor0

\fs34 \cf4 A property wrapper adds a layer of separation between code that manages how a property is stored and the code that defines a property. For example, if you have properties that provide thread-safety checks or store their underlying data in a database, you have to write that code on every property. When you use a property wrapper, you write the management code once when you define the wrapper, and then reuse that management code by applying it to multiple properties.\
\
\
\pard\pardeftab720\partightenfactor0

\f2\fs30 \cf4 \cb6 \outl0\strokewidth0 @propertyWrapper\cb1 \
\cb6 struct TwelveOrLess \{\cb1 \
\cb6     private var number = 0\cb1 \
\cb6     var wrappedValue: Int \{\cb1 \
\cb6         get \{ return number \}\cb1 \
\cb6         set \{ number = min(newValue, 12) \}\cb1 \
\cb6     \}\cb1 \
\cb6 \}\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs34 \cf4 \cb5 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0

\f2\fs30 \cf4 \cb6 \outl0\strokewidth0 Struct SmallRectangle \{\cb1 \
\cb6     @TwelveOrLess var height: Int\cb1 \
\cb6     @TwelveOrLess var width: Int\cb1 \
\cb6 \}\
\cb1 \
\cb6 var rectangle = SmallRectangle()\cb1 \
\cb6 print(rectangle.height)\cb1 \
\cb6 // Prints "0"\
\cb1 \
\cb6 rectangle.height = 10\cb1 \
\cb6 print(rectangle.height)\cb1 \
\cb6 // Prints "10"\
\cb1 \
\cb6 rectangle.height = 24\cb1 \
\cb6 print(rectangle.height)\cb1 \
\cb6 // Prints "12"\cb1 \
\pard\pardeftab720\partightenfactor0

\f1\fs34 \cf4 \cb5 \outl0\strokewidth0 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \outl0\strokewidth0 When you apply a wrapper to a property, the compiler synthesizes code that provides storage for the wrapper and code that provides access to the property through the wrapper.\'a0\outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0
\cf4 \
\pard\pardeftab720\sl340\partightenfactor0

\f2\fs21\fsmilli10588 \cf7 \cb8 \outl0\strokewidth0 \strokec7 struct SmallRectangle \{\
    private var _height = TwelveOrLess()\
    private var _width = TwelveOrLess()\
    var height: Int \{\
        get \{ return _height.wrappedValue \}\
        set \{ _height.wrappedValue = newValue \}\
    \}\
    var width: Int \{\
        get \{ return _width.wrappedValue \}\
        set \{ _width.wrappedValue = newValue \}\
    \}\
\}\
\pard\pardeftab720\partightenfactor0

\f1\fs34 \cf4 \cb5 \strokec4 The\'a0
\f2 _height
\f1 \'a0and\'a0
\f2 _width
\f1 \'a0properties store an instance of the property wrapper,\'a0
\f2 TwelveOrLess
\f1 . The getter and setter for\'a0
\f2 height
\f1 \'a0and\'a0
\f2 width
\f1 \'a0wrap access to the\'a0
\f2 wrappedValue
\f1 \'a0property.\
\pard\pardeftab720\partightenfactor0
\cf4 \outl0\strokewidth0 \
\
\
\
\
\pard\pardeftab720\sl440\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://docs.swift.org/swift-book/documentation/the-swift-programming-language/properties/#Setting-Initial-Values-for-Wrapped-Properties"}}{\fldrslt 
\fs39\fsmilli19765 \cf4 \outl0\strokewidth0 Setting Initial Values for Wrapped Properties}}
\fs39\fsmilli19765 \outl0\strokewidth0 :- 
\fs34 To support setting an initial value or other customization, the property wrapper needs to add an initializer.\
\
\pard\pardeftab720\partightenfactor0

\f2\fs30 \cf4 \cb6 @propertyWrapper\cb1 \
\cb6 struct SmallNumber \{\cb1 \
\cb6     private var maximum: Int\cb1 \
\cb6     private var number: Int\
\cb1 \
\cb6     var wrappedValue: Int \{\cb1 \
\cb6         get \{ return number \}\cb1 \
\cb6         set \{ number = min(newValue, maximum) \}\cb1 \
\cb6     \}\
\cb1 \
\cb6     init() \{\cb1 \
\cb6         maximum = 12\cb1 \
\cb6         number = 0\cb1 \
\cb6     \}\cb1 \
\cb6     init(wrappedValue: Int) \{\cb1 \
\cb6         maximum = 12\cb1 \
\cb6         number = min(wrappedValue, maximum)\cb1 \
\cb6     \}\cb1 \
\cb6     init(wrappedValue: Int, maximum: Int) \{\cb1 \
\cb6         self.maximum = maximum\cb1 \
\cb6         number = min(wrappedValue, maximum)\cb1 \
\cb6     \}\cb1 \
\cb6 \}\cb1 \
\pard\pardeftab720\sl440\partightenfactor0

\f1\fs39\fsmilli19765 \cf4 \cb5 \
\
\pard\pardeftab720\partightenfactor0

\fs34 \cf4 When you apply a wrapper to a property and you don\'92t specify an initial value, Swift uses the\'a0
\f2 init()
\f1 \'a0initializer to set up the wrapper. For example:\
\pard\pardeftab720\sl340\partightenfactor0

\f2\fs21\fsmilli10588 \cf7 \strokec7 struct ZeroRectangle \{\
    @SmallNumber var height: Int\
    @SmallNumber var width: Int\
\}\
\
var zeroRectangle = ZeroRectangle()\
print(zeroRectangle.height, zeroRectangle.width)\
// Prints "0 0"\
\pard\pardeftab720\sl440\partightenfactor0

\f1\fs39\fsmilli19765 \cf7 \cb8 \strokec9 \
\
\pard\pardeftab720\partightenfactor0

\fs34 \cf7 \cb8 \strokec10 When you specify an initial value for the property, Swift uses the\'a0
\f2 \cf7 \cb8 \strokec10 init(wrappedValue:)
\f1 \cf7 \cb8 \strokec10 \'a0initializer to set up the wrapper. For example:\
\pard\pardeftab720\sl340\partightenfactor0

\f2\fs21\fsmilli10588 \cf7 \cb8 \strokec10 struct UnitRectangle \{\
    @SmallNumber var height: Int = 1\
    @SmallNumber var width: Int = 1\
\}\
\
var unitRectangle = UnitRectangle()\
print(unitRectangle.height, unitRectangle.width)\
// Prints "1 1
\f1\fs34 \cf7 \cb8 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb5 \outl0\strokewidth0 \strokec4 When you write\'a0
\f2 = 1
\f1 \'a0on a property with a wrapper, that\'92s translated into a call to the\'a0
\f2 init(wrappedValue:)
\f1 \'a0initializer.\
\
\
\
\
\pard\pardeftab720\partightenfactor0
\cf12 \cb8 \strokec13 When you write arguments in parentheses after the custom attribute, Swift uses the initializer that accepts those arguments to set up the wrapper. For example, if you provide an initial value and a maximum value, Swift uses the\'a0
\f2 \cf12 \cb8 \strokec13 init(wrappedValue:maximum:)
\f1 \cf12 \cb8 \strokec13 \'a0initializer:\
\pard\pardeftab720\sl340\partightenfactor0

\f2\fs21\fsmilli10588 \cf12 \cb8 \strokec13 struct NarrowRectangle \{\
    @SmallNumber(wrappedValue: 2, maximum: 5) var height: Int\
    @SmallNumber(wrappedValue: 3, maximum: 4) var width: Int\
\}\
\
var narrowRectangle = NarrowRectangle()\
print(narrowRectangle.height, narrowRectangle.width)\
// Prints "2 3"\
\
narrowRectangle.height = 100\
narrowRectangle.width = 100\
print(narrowRectangle.height, narrowRectangle.width)\
// Prints "5 4"\
\pard\pardeftab720\partightenfactor0

\f1\fs34 \cf12 \cb8 \strokec13 The instance of\'a0
\f2 \cf12 \cb8 \strokec13 SmallNumber
\f1 \cf12 \cb8 \strokec13 \'a0that wraps\'a0
\f2 \cf12 \cb8 \strokec13 height
\f1 \cf12 \cb8 \strokec13 \'a0is created by calling\'a0
\f2 \cf12 \cb8 \strokec13 SmallNumber(wrappedValue: 2, maximum: 5)
\f1 \cf12 \cb8 \strokec13 , and the instance that wraps\'a0
\f2 \cf12 \cb8 \strokec13 width
\f1 \cf12 \cb8 \strokec13 \'a0is created by calling\'a0
\f2 \cf12 \cb8 \strokec13 SmallNumber(wrappedValue: 3, maximum: 4)
\f1 \cf12 \cb8 \strokec13 .\
\
\
\pard\pardeftab720\sl440\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://docs.swift.org/swift-book/documentation/the-swift-programming-language/properties/#Projecting-a-Value-From-a-Property-Wrapper"}}{\fldrslt 
\fs39\fsmilli19765 \cf4 \cb5 \strokec4 Projecting a Value From a Property Wrapper}}
\fs39\fsmilli19765 \cf4 \cb5 \strokec4 \
\pard\pardeftab720\partightenfactor0

\fs34 \cf4 In addition to the wrapped value, a property wrapper can expose additional functionality by defining a\'a0
\f3\i projected value
\f1\i0 \'a0\'97 for example, a property wrapper that manages access to a database can expose a\'a0
\f2 flushDatabaseConnection()
\f1 \'a0method on its projected value. The name of the projected value is the same as the wrapped value, except it begins with a dollar sign (
\f2 $
\f1 ). Because your code can\'92t define properties that start with\'a0
\f2 $
\f1 \'a0the projected value never interferes with properties you define.\
In the\'a0
\f2 SmallNumber
\f1 \'a0example above, if you try to set the property to a number that\'92s too large, the property wrapper adjusts the number before storing it. The code below adds a\'a0
\f2 projectedValue
\f1 \'a0property to the\'a0
\f2 SmallNumber
\f1 \'a0structure to keep track of whether the property wrapper adjusted the new value for the property before storing that new value.\
\pard\pardeftab720\sl340\partightenfactor0

\f2\fs21\fsmilli10588 \cf8 \cb7 \strokec14 @propertyWrapper\
struct SmallNumber \{\
    private var number: Int\
    private(set) var projectedValue: Bool\
\
    var wrappedValue: Int \{\
        get \{ return number \}\
        set \{\
            if newValue > 12 \{\
                number = 12\
                projectedValue = true\
            \} else \{\
                number = newValue\
                projectedValue = false\
            \}\
        \}\
    \}\
\
    init() \{\
        self.number = 0\
        self.projectedValue = false\
    \}\
\}\
struct SomeStructure \{\
    @SmallNumber var someNumber: Int\
\}\
var someStructure = SomeStructure()\
\
someStructure.someNumber = 4\
print(someStructure.$someNumber)\
// Prints "false"\
\
someStructure.someNumber = 55\
print(someStructure.$someNumber)\
// Prints "true"\
\pard\pardeftab720\partightenfactor0

\f1\fs34 \cf8 \cb7 \strokec15 \
\pard\pardeftab720\partightenfactor0
\cf8 \cb7 \strokec14 \
\
\cf8 \cb7 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb5 \
#########################################################\

\f0\fs35\fsmilli17640 \cf2 \cb3 \outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
Like the name implies, a property wrapper is essentially a type that\'a0
\f4\i wraps
\f0\i0 \'a0a given value in order to attach additional logic to it \'97 and can be implemented using either a struct or a class by annotating it with the\'a0
\f5\fs21\fsmilli10800 \cb16 @propertyWrapper
\f0\fs35\fsmilli17640 \cb3 \'a0attribute. Besides that, the only real requirement is that each property wrapper type should contain a stored property called\'a0
\f5\fs21\fsmilli10800 \cb16 wrappedValue
\f0\fs35\fsmilli17640 \cb3 , which tells Swift which underlying value that\'92s being wrapped.
\fs25\fsmilli12600 \
\pard\pardeftab720\sl360\partightenfactor0
\cf2 \
For example, let\'92s say that we wanted to create a property wrapper that automatically capitalizes all\'a0
\f5\fs22\fsmilli11340 \cb16 String
\f0\fs25\fsmilli12600 \cb3 \'a0values that were assigned to it. That might be implemented like this:\
\pard\pardeftab720\sl446\partightenfactor0

\f5\fs32 \cf17 \cb18 \strokec17 @propertyWrapper struct\cf19 \strokec19  Capitalized \{\
    \cf17 \strokec17 var\cf19 \strokec19  wrappedValue: \cf20 \strokec20 String\cf19 \strokec19  \{\
        \cf17 \strokec17 didSet\cf19 \strokec19  \{ wrappedValue = wrappedValue.\cf21 \strokec21 capitalized\cf19 \strokec19  \}\
    \}\
\
    \cf17 \strokec17 init\cf19 \strokec19 (wrappedValue: \cf20 \strokec20 String\cf19 \strokec19 ) \{\
        \cf17 \strokec17 self\cf19 \strokec19 .\cf21 \strokec21 wrappedValue\cf19 \strokec19  = wrappedValue.\cf21 \strokec21 capitalized\cf19 \strokec19 \
    \}\
\}\
\
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs25\fsmilli12600 \cf2 \cb3 \strokec2 To apply our new property wrapper to any of our\'a0
\f5\fs22\fsmilli11340 \cb16 String
\f0\fs25\fsmilli12600 \cb3 \'a0properties, we simply have to annotate it with\'a0
\f5\fs22\fsmilli11340 \cb16 @Capitalized
\f0\fs25\fsmilli12600 \cb3 \'a0\'97 and Swift will automatically match that annotation to our above type. Here\'92s how we might do that to ensure that a\'a0
\f5\fs22\fsmilli11340 \cb16 User
\f0\fs25\fsmilli12600 \cb3 \'a0type\'92s\'a0
\f5\fs22\fsmilli11340 \cb16 firstName
\f0\fs25\fsmilli12600 \cb3 \'a0and\'a0
\f5\fs22\fsmilli11340 \cb16 lastName
\f0\fs25\fsmilli12600 \cb3 \'a0properties are always capitalized:\
\pard\pardeftab720\sl446\partightenfactor0

\f5\fs32 \cf17 \cb18 \strokec17 struct\cf19 \strokec19  User \{\
    \cf17 \strokec17 @Capitalized var\cf19 \strokec19  firstName: \cf20 \strokec20 String\cf19 \strokec19 \
    \cf17 \strokec17 @Capitalized var\cf19 \strokec19  lastName: \cf20 \strokec20 String\cf19 \strokec19 \
\}\
}