{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww17080\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Actors in Swift:-\
\
Swift 5.5:- \
\
Data race:- Memory location is accessed at least by 2 thread and one is trying to write it.\
\
Solution:- Avoided by using .barrier flag on concurrent Dispatch Queue with sync block for accessing shared resource.\
\
Actors:- \
1.Simillar to class :- properties , functions\
2. Do not have inheritance.\
3.Takes care concurrency related issue.\
4.Should use whenever Data race may occur\
\
@nonisolated:- keyword for var which is not having issue of Data race any way.\
\
To call methods which causing data races on shared resource,  \
 queue1.async \{\
Task \{\
	let bookedSeat = await flight.bookSeat()\
\}	\
\
\}\
==> \
queue2.async \{\
 Task \{\
	let bookedSeat = await flight.getAvailableSeat()\
 \}	\
\}\
\
@Mainactor:- Similar to DispatchQeue.main.async\{\} , \
@Mainactor \
func updateUI() \{\
	self.label.text = \'93updated from background thread \'94\
\}\
\
\
https://www.hackingwithswift.com/swift/5.5/actors \
\
}